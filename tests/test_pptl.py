from qgis._core import (
    QgsFeature,
    QgsGeometry,
    QgsProcessingOutputLayerDefinition,
    QgsVectorLayer,
)

from src.algorithm import PolygonsParallelToLineAlgorithm
from qgis import processing
import pytest
import pydevd_pycharm


@pytest.mark.parametrize(
    "line, poly, expected, distance, angle, longest, no_multi",
    [
        (
            "MultiLineString ((-0.78524502873558522 0.78215823049752353, -0.77994964659850341 -0.14188595242323876))",
            "MultiPolygon (((-0.6447931526390871 0.44650499286733236, -0.38516405135520682 0.3495007132667618, -0.43366619115549221 0.01854493580599137, -0.71041369472182603 0.08416547788873041, -0.6447931526390871 0.44650499286733236)))",
            "MultiPolygon (((-0.68398923302899783 0.42454497494530907, -0.41095196119789801 0.37692408997525467, -0.39778470387856357 0.04269242251306483, -0.68187904651011511 0.05631742740029373, -0.68398923302899783 0.42454497494530907)))",
            0.0,
            89.9,
            False,
            False,
        ),
        (
            "MultiLineString ((-0.78524502873558522 0.78215823049752353, -0.77994964659850341 -0.14188595242323876))",
            "MultiPolygon (((-1.13855859256776459 0.47119326486376623, -0.87892949128388431 0.37418898526319566, -0.92743163108416971 0.04323320780242523, -1.20417913465050352 0.10885374988516427, -1.13855859256776459 0.47119326486376623)))",
            "MultiPolygon (((-1.17093506453105389 0.45376299710339374, -0.89965419742828023 0.39698455367396923, -0.89773737541894105 0.06249911304425523, -1.18121261928065624 0.08567285661260308, -1.17093506453105389 0.45376299710339374)))",
            0.0,
            89.9,
            False,
            False,
        ),
        (
            "MultiLineString ((-1.34074564137856633 0.56706658745441496, -0.82873964030610581 0.56706658745441496))",
            "MultiPolygon (((-1.13855859256776459 0.47119326486376623, -0.87892949128388431 0.37418898526319566, -0.92743163108416971 0.04323320780242523, -1.20417913465050352 0.10885374988516427, -1.13855859256776459 0.47119326486376623)))",
            "MultiPolygon (((-1.21013620195951543 0.42253646485974289, -0.93297722141892203 0.42253646485974289, -0.86257878162282142 0.09553762101752955, -1.14478929810205887 0.06014750005203062, -1.21013620195951543 0.42253646485974289)))",
            0.0,
            89.9,
            False,
            False,
        ),
        (
            "MultiLineString ((-1.25485015920502119 -0.0590662694422166, -0.74284415813256066 -0.0590662694422166))",
            "MultiPolygon (((-1.13855859256776459 0.47119326486376623, -0.87892949128388431 0.37418898526319566, -0.92743163108416971 0.04323320780242523, -1.20417913465050352 0.10885374988516427, -1.13855859256776459 0.47119326486376623)))",
            "MultiPolygon (((-1.1871967768558136 0.44239081291340376, -0.91219172312418717 0.40790428052224881, -0.88302842311872054 0.07468710489551045, -1.16744930187664586 0.07468710489551042, -1.1871967768558136 0.44239081291340376)))",
            0.0,
            15,
            False,
            False,
        ),
        (
            "MultiLineString ((-1.25485015920502119 -0.0590662694422166, -0.74284415813256066 -0.0590662694422166))",
            "MultiPolygon (((-1.13855859256776459 0.47119326486376623, -0.87892949128388431 0.37418898526319566, -0.92743163108416971 0.04323320780242523, -1.20417913465050352 0.10885374988516427, -1.13855859256776459 0.47119326486376623)))",
            "MultiPolygon (((-1.13855859256776459 0.47119326486376623, -0.87892949128388431 0.37418898526319566, -0.92743163108416971 0.04323320780242523, -1.20417913465050352 0.10885374988516427, -1.13855859256776459 0.47119326486376623)))",
            0.0,
            1,
            False,
            False,
        ),
        (
            "MultiLineString ((-1.25485015920502119 -0.0590662694422166, -0.74284415813256066 -0.0590662694422166))",
            "MultiPolygon (((-1.13855859256776459 0.47119326486376623, -0.87892949128388431 0.37418898526319566, -0.92743163108416971 0.04323320780242523, -1.20417913465050352 0.10885374988516427, -1.13855859256776459 0.47119326486376623)))",
            "MultiPolygon (((-0.83403292106722648 0.37885804026033987, -0.8923650248277486 0.10790700009778054, -1.22685595773904499 0.10790700009778054, -1.20205812138861856 0.39124479070427176, -0.83403292106722648 0.37885804026033987)))",
            0.0,
            89.9,
            True,
            False,
        ),
        (
            "MultiLineString ((-1.25485015920502119 -0.0590662694422166, -0.74284415813256066 -0.0590662694422166))",
            "MultiPolygon (((-1.13855859256776459 0.47119326486376623, -0.87892949128388431 0.37418898526319566, -0.92743163108416971 0.04323320780242523, -1.20417913465050352 0.10885374988516427, -1.13855859256776459 0.47119326486376623)),((-0.84384637831822706 0.02278072057936531, -0.80285080728085323 0.08345416571467867, -0.75529594487749951 0.05557717740926449, -0.79301187023188346 -0.01001573625053376, -0.84384637831822706 0.02278072057936531)))",
            "MultiPolygon (((-1.24654158503044599 0.3751652088069326, -0.97578749498092421 0.4344047497889188, -0.83712366080246325 0.13000940604858219, -1.10524831952902503 0.03511786977587072, -1.24654158503044599 0.3751652088069326)),((-0.75579941018395158 0.15813706103248459, -0.75424367414173732 0.23134555421896674, -0.69917061824735272 0.23370138308289118, -0.69530350294242027 0.15813706103248459, -0.75579941018395158 0.15813706103248459)))",
            0.0,
            89.9,
            False,
            False,
        ),
        (
            "MultiLineString ((-1.25485015920502119 -0.0590662694422166, -0.74284415813256066 -0.0590662694422166))",
            "MultiPolygon (((-1.13855859256776459 0.47119326486376623, -0.87892949128388431 0.37418898526319566, -0.92743163108416971 0.04323320780242523, -1.20417913465050352 0.10885374988516427, -1.13855859256776459 0.47119326486376623)),((-0.84384637831822706 0.02278072057936531, -0.80285080728085323 0.08345416571467867, -0.75529594487749951 0.05557717740926449, -0.79301187023188346 -0.01001573625053376, -0.84384637831822706 0.02278072057936531)))",
            "MultiPolygon (((-1.13855859256776459 0.47119326486376623, -0.87892949128388431 0.37418898526319566, -0.92743163108416971 0.04323320780242523, -1.20417913465050352 0.10885374988516427, -1.13855859256776459 0.47119326486376623)),((-0.84384637831822706 0.02278072057936531, -0.80285080728085323 0.08345416571467867, -0.75529594487749951 0.05557717740926449, -0.79301187023188346 -0.01001573625053376, -0.84384637831822706 0.02278072057936531)))",
            0.0,
            1,
            False,
            False,
        ),
        (
            "MultiLineString ((-1.25485015920502119 -0.0590662694422166, -0.74284415813256066 -0.0590662694422166))",
            "MultiPolygon (((-1.13855859256776459 0.47119326486376623, -0.87892949128388431 0.37418898526319566, -0.92743163108416971 0.04323320780242523, -1.20417913465050352 0.10885374988516427, -1.13855859256776459 0.47119326486376623)),((-0.84384637831822706 0.02278072057936531, -0.80285080728085323 0.08345416571467867, -0.75529594487749951 0.05557717740926449, -0.79301187023188346 -0.01001573625053376, -0.84384637831822706 0.02278072057936531)))",
            "MultiPolygon (((-1.13855859256776459 0.47119326486376623, -0.87892949128388431 0.37418898526319566, -0.92743163108416971 0.04323320780242523, -1.20417913465050352 0.10885374988516427, -1.13855859256776459 0.47119326486376623)),((-0.84384637831822706 0.02278072057936531, -0.80285080728085323 0.08345416571467867, -0.75529594487749951 0.05557717740926449, -0.79301187023188346 -0.01001573625053376, -0.84384637831822706 0.02278072057936531)))",
            0.0,
            89.9,
            False,
            True,
        ),
        (
            "MultiLineString ((-1.25485015920502119 -0.0590662694422166, -0.74284415813256066 -0.0590662694422166))",
            "MultiPolygon (((-1.13855859256776459 0.47119326486376623, -0.87892949128388431 0.37418898526319566, -0.92743163108416971 0.04323320780242523, -1.20417913465050352 0.10885374988516427, -1.13855859256776459 0.47119326486376623)),((-0.84384637831822706 0.02278072057936531, -0.80285080728085323 0.08345416571467867, -0.75529594487749951 0.05557717740926449, -0.79301187023188346 -0.01001573625053376, -0.84384637831822706 0.02278072057936531)))",
            "MultiPolygon (((-0.8833845867402863 0.44968279119263754, -0.83806059814248524 0.17625485452213663, -1.14914516381170495 0.05332976675620382, -1.2302089415084545 0.32595386733970422, -0.8833845867402863 0.44968279119263754)),((-1.12521071898094416 -0.02932579000920188, -1.05217741858032343 -0.03462114852973353, -1.05263942972641011 -0.08974263218976386, -1.12830263972783174 -0.08974263218976386, -1.12521071898094416 -0.02932579000920188)))",
            0.0,
            89.9,
            True,
            False,
        ),
    ],
    ids=[
        "poly to the right",
        "poly to the left",
        "poly below",
        "poly above",
        "below angle threshold",
        "by longest",
        "multipoly",
        "multipoly below angle threshold",
        "multipoly do not rotate",
        "multipoly by longest",
    ],
)
def test_pptl(line, poly, expected, distance, angle, longest, no_multi, qgis_processing):
    # pydevd_pycharm.settrace("host.docker.internal", port=53100, stdoutToServer=True, stderrToServer=True)

    v1 = QgsVectorLayer("linestring", "temp_line", "memory")
    pr = v1.dataProvider()
    f = QgsFeature()
    f.setGeometry(QgsGeometry.fromWkt(line))
    pr.addFeature(f)
    v1.updateExtents()

    v2 = QgsVectorLayer("polygon", "temp_poly", "memory")
    pr = v2.dataProvider()
    f = QgsFeature()
    f.setGeometry(QgsGeometry.fromWkt(poly))
    pr.addFeature(f)
    v2.updateExtents()
    params = {
        "LINE_LAYER": v1,
        "POLYGON_LAYER": v2,
        "SELECTED": False,
        "WRITE_SELECTED": False,
        "LONGEST": longest,
        "MULTI": no_multi,
        "DISTANCE": distance,
        "ANGLE": angle,
        "OUTPUT_LAYER": QgsProcessingOutputLayerDefinition("TEMPORARY_OUTPUT"),
    }
    result = processing.run(PolygonsParallelToLineAlgorithm(), params)["result"]
    assert result == expected
