from qgis._core import (
    QgsFeature,
    QgsGeometry,
    QgsLineString,
    QgsPoint,
    QgsPointXY,
    QgsProcessingOutputLayerDefinition,
    QgsVectorLayer,
    QgsMultiLineString,
)

from pptl_algorithm import PolygonsParallelToLineAlgorithm
from qgis import processing
import pytest
import pydevd_pycharm


@pytest.mark.parametrize(
    "line, poly, expected, distance, angle",
    [
        (
            "MultiLineString ((-0.78524502873558522 0.78215823049752353, -0.77994964659850341 -0.14188595242323876))",
            "MultiPolygon (((-0.6447931526390871 0.44650499286733236, -0.38516405135520682 0.3495007132667618, -0.43366619115549221 0.01854493580599137, -0.71041369472182603 0.08416547788873041, -0.6447931526390871 0.44650499286733236)))",
            "MultiPolygon (((-0.68398923302899783 0.42454497494530907, -0.41095196119789801 0.37692408997525467, -0.39778470387856357 0.04269242251306483, -0.68187904651011511 0.05631742740029373, -0.68398923302899783 0.42454497494530907)))",
            0.0,
            89.9,
        ),
        (
            "MultiLineString ((-0.78524502873558522 0.78215823049752353, -0.77994964659850341 -0.14188595242323876))",
            "MultiPolygon (((-1.13855859256776459 0.47119326486376623, -0.87892949128388431 0.37418898526319566, -0.92743163108416971 0.04323320780242523, -1.20417913465050352 0.10885374988516427, -1.13855859256776459 0.47119326486376623)))",
            "MultiPolygon (((-1.17093506453105389 0.45376299710339374, -0.89965419742828023 0.39698455367396923, -0.89773737541894105 0.06249911304425523, -1.18121261928065624 0.08567285661260308, -1.17093506453105389 0.45376299710339374)))",
            0.0,
            89.9,
        ),
        (
            "MultiLineString ((-1.34074564137856633 0.56706658745441496, -0.82873964030610581 0.56706658745441496))",
            "MultiPolygon (((-1.13855859256776459 0.47119326486376623, -0.87892949128388431 0.37418898526319566, -0.92743163108416971 0.04323320780242523, -1.20417913465050352 0.10885374988516427, -1.13855859256776459 0.47119326486376623)))",
            "MultiPolygon (((-1.21013620195951543 0.42253646485974289, -0.93297722141892203 0.42253646485974289, -0.86257878162282142 0.09553762101752955, -1.14478929810205887 0.06014750005203062, -1.21013620195951543 0.42253646485974289)))",
            0.0,
            89.9,
        ),
        (
            "MultiLineString ((-1.25485015920502119 -0.0590662694422166, -0.74284415813256066 -0.0590662694422166))",
            "MultiPolygon (((-1.13855859256776459 0.47119326486376623, -0.87892949128388431 0.37418898526319566, -0.92743163108416971 0.04323320780242523, -1.20417913465050352 0.10885374988516427, -1.13855859256776459 0.47119326486376623)))",
            "MultiPolygon (((-1.1871967768558136 0.44239081291340376, -0.91219172312418717 0.40790428052224881, -0.88302842311872054 0.07468710489551045, -1.16744930187664586 0.07468710489551042, -1.1871967768558136 0.44239081291340376)))",
            0.0,
            15,
        ),
        (
            "MultiLineString ((-1.25485015920502119 -0.0590662694422166, -0.74284415813256066 -0.0590662694422166))",
            "MultiPolygon (((-1.13855859256776459 0.47119326486376623, -0.87892949128388431 0.37418898526319566, -0.92743163108416971 0.04323320780242523, -1.20417913465050352 0.10885374988516427, -1.13855859256776459 0.47119326486376623)))",
            "MultiPolygon (((-1.13855859256776459 0.47119326486376623, -0.87892949128388431 0.37418898526319566, -0.92743163108416971 0.04323320780242523, -1.20417913465050352 0.10885374988516427, -1.13855859256776459 0.47119326486376623)))",
            0.0,
            1,
        ),
    ],
    ids=["poly to the right", "poly to the left", "poly below", "poly above", "below angle threshold"],
)
def test_pptl(line, poly, expected, distance, angle, qgis_processing):
    # pydevd_pycharm.settrace("host.docker.internal", port=53100, stdoutToServer=True, stderrToServer=True)

    v1 = QgsVectorLayer("linestring", "temp_line", "memory")
    pr = v1.dataProvider()
    f = QgsFeature()
    f.setGeometry(QgsGeometry.fromWkt(line))
    pr.addFeature(f)
    v1.updateExtents()

    v2 = QgsVectorLayer("polygon", "temp_poly", "memory")
    pr = v2.dataProvider()
    f = QgsFeature()
    f.setGeometry(QgsGeometry.fromWkt(poly))
    pr.addFeature(f)
    v2.updateExtents()
    params = {
        "LINE_LAYER": v1,
        "POLYGON_LAYER": v2,
        "SELECTED": False,
        "WRITE_SELECTED": False,
        "LONGEST": False,
        "MULTI": False,
        "DISTANCE": distance,
        "ANGLE": angle,
        "OUTPUT_LAYER": QgsProcessingOutputLayerDefinition("TEMPORARY_OUTPUT"),
    }
    result = processing.run(PolygonsParallelToLineAlgorithm(), params)["result"]
    assert result == expected
